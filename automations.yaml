- id: '1676504222717'
  alias: Low battery level detection & notification for all battery sensors
  description: ''
  use_blueprint:
    path: sbyx/low-battery-level-detection-notification-for-all-battery-sensors.yaml
    input:
      actions:
      - service: notify.mobile_app_pixel_6_pro
        data:
          message: Check batteries of sensor
          title: Check batteries of sensor
      threshold: 20
      time: 07:00:00
- id: automation_plant_moisture
  alias: Plant moisture
  description: Liesst die Pflanzen aus, die aktuell zu wenig Feuchtigkeit haben und
    schickt eine Notifizierung ans Handy.
  trigger:
  - platform: time
    at: 08:00:00
  condition:
  - '{{ sensors != '''' and (day | int == 0 or day | int == now().isoweekday()) }}'
  action:
  - choose: []
    default:
    - service: notify.mobile_app_pixel_6_pro
      data:
        title: 'Giessen {{ sensors }}

          '
        message: 'Giessen {{ sensors }}

          '
        data:
          clickAction: dashboard-pflanzen/0
  variables:
    day: 0
    exclude:
      entity_id: []
    sensors: "{% set result = namespace(sensors=[]) %}  {% for state in states.plant
      if state.attributes.moisture_status == \"Low\" %}\n    {% set result.sensors
      = result.sensors + [state.attributes.friendly_name] %}\n{% endfor %}  {{result.sensors|join(',
      ')}}"
  mode: single
- id: '1677342314965'
  alias: Plant conductivity
  description: ''
  trigger:
  - platform: time
    at: 08:00:00
  condition:
  - '{{ sensors != '''' and (day | int == 0 or day | int == now().isoweekday()) }}'
  action:
  - choose: []
    default:
    - service: notify.mobile_app_pixel_6_pro
      data:
        title: 'Dünger {{ sensors }}

          '
        message: 'Dünger {{ sensors }}

          '
        data:
          clickAction: dashboard-pflanzen/0
  variables:
    day: 0
    exclude:
      entity_id: []
    sensors: "{% set result = namespace(sensors=[]) %}  {% for state in states.plant
      if state.attributes.conductivity_status == \"Low\" %}\n    {% set result.sensors
      = result.sensors + [state.attributes.friendly_name] %}\n{% endfor %}  {{result.sensors|join(',
      ')}}"
  mode: single
- id: '1680207437285'
  alias: Automatische Reinigung EG
  description: Checkt ob die Bedingungen passen (Keiner daheim, Nicht in der Nacht
    und noch nicht gereinigt) und zwar dann wenn einer von uns das WLAN verlässt.
    Wenn es so ist, dass lässt er per Skript den Robby losfahren
  trigger:
  - platform: state
    entity_id:
    - person.stefan_siegl
    from: home
    to: not_home
    alias: Stefan verlässt das Haus
  condition:
  - condition: and
    conditions:
    - condition: state
      entity_id: person.stefan_siegl
      state: not_home
      alias: Stefan ist auch wirklich weg
    - condition: state
      entity_id: input_boolean.automatische_reinigung_noetig_eg
      state: 'on'
      alias: Nur falls lange nicht geputzt wurde
    - condition: time
      after: 07:30:00
      before: '22:00:00'
      weekday:
      - mon
      - tue
      - wed
      - thu
      - sat
      - sun
      alias: Nur zwischen 7:30 und 22:00 (nicht Freitags)
    - condition: template
      value_template: '{# Türe ist auch auf #}

        {{ states("binary_sensor.klo_door_eg_door_left_open") == "on" }}'
      alias: Klotuere ist offen
  action:
  - if:
    - condition: sun
      after: sunset
      before: sunrise
    then:
    - service: light.turn_on
      data: {}
      target:
        area_id: erdgeschoss
    alias: Mach Licht an falls es dunkel ist
  - service: script.start_vacuum_eg
    data: {}
    alias: Starte den normalen Reinigungsmodus
  - service: light.turn_off
    data: {}
    target:
      area_id: erdgeschoss
    alias: Mach das Licht im EG wieder aus
  mode: single
- id: '1680210576467'
  alias: Automatische Reinigung EG reset
  description: Resets cleaning flag
  trigger:
  - platform: time
    at: 00:00:00
  condition:
  - condition: template
    value_template: '{# only if at least 3 days ago #}

      {{ as_timestamp(now()) - as_timestamp(states(''sensor.roborock_s7_maxv_last_clean_end''))
      > 60 * 60 * 24 * 3 }}'
  action:
  - service: input_boolean.turn_on
    target:
      entity_id: input_boolean.automatische_reinigung_noetig_eg
    data: {}
  mode: single
- id: '1680211451263'
  alias: Automatische Reinigung EG done
  description: ''
  trigger:
  - platform: state
    entity_id:
    - vacuum.roborock_s7_maxv
    to: returning
  condition:
  - condition: numeric_state
    entity_id: sensor.roborock_s7_maxv_last_clean_duration
    above: 1800
  action:
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.automatische_reinigung_noetig_eg
  mode: single
- id: '1680212042339'
  alias: Automatische Reinigung OG
  description: Checkt ob die Bedingungen passen (Keiner daheim, Nicht in der Nacht
    und noch nicht gereinigt) und zwar dann wenn einer von uns das WLAN verlässt.
    Wenn es so ist, dass lässt er per Skript den Robby losfahren
  trigger:
  - platform: state
    entity_id:
    - person.stefan_siegl
    from: home
    to: not_home
  condition:
  - condition: and
    conditions:
    - condition: state
      entity_id: person.stefan_siegl
      state: not_home
      alias: Stefan ist nicht da
    - condition: state
      entity_id: input_boolean.automatische_reinigung_noetig_og
      state: 'on'
      alias: Falls lange nicht gesaugt wurde
    - condition: time
      after: 07:30:00
      before: '22:00:00'
      weekday:
      - mon
      - tue
      - wed
      - thu
      - sat
      - sun
      alias: Nur zwischen 07:30 und 22:00 (nicht Freitags)
    - condition: template
      value_template: '{# Türe ist auch auf #}

        {{ states("binary_sensor.door_klo_2og_5173_door_left_open") == "on" }}'
      alias: Türe ist offen
  action:
  - service: script.start_vacuum_og
    data: {}
  mode: single
- id: '1680212305674'
  alias: Automatische Reinigung OG done
  description: ''
  trigger:
  - platform: state
    entity_id:
    - vacuum.roboter_staubsauger
    to: returning
  condition:
  - condition: numeric_state
    entity_id: sensor.roboter_staubsauger_last_clean_duration
    above: 900
  action:
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.automatische_reinigung_noetig_og
  mode: single
- id: '1680212384496'
  alias: Automatische Reinigung OG reset
  description: Resets cleaning flag
  trigger:
  - platform: time
    at: 00:00:00
  condition:
  - condition: template
    value_template: '{# only if at least 3 days ago #}

      {{ as_timestamp(now()) - as_timestamp(states(''sensor.roboter_staubsauger_last_clean_end''))
      > 60 * 60 * 24 * 3 }}'
  action:
  - service: input_boolean.turn_on
    target:
      entity_id: input_boolean.automatische_reinigung_noetig_og
    data: {}
  mode: single
- id: '1680900446685'
  alias: Stefan geht
  description: Alles was man ausmachen sollte wenn ich weg gehe
  trigger:
  - platform: state
    entity_id:
    - person.stefan_siegl
    from: home
    to: not_home
  condition: []
  action:
  - service: light.turn_off
    data: {}
    target:
      area_id:
      - erdgeschoss
      - garten
      - wohnzimmer
      - esszimmer
  mode: single
- id: '1681727125696'
  alias: Briefkasten - increase open counter
  description: Erhöhe den Counter für den Briefkasten wenn er geöffnet wurde (-->
    etwas wurde hineingelegt)
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.briefkasten_sensor_opening
    to: 'on'
  condition: []
  action:
  - service: counter.increment
    data: {}
    target:
      entity_id: counter.briefkasten_open_counter
  mode: single
- id: '1682083301051'
  alias: Reminder Mülltonnen
  description: ''
  trigger:
  - platform: template
    value_template: ' {{ if (sensor.waste_bio) > 1 }}'
  condition: []
  action: []
  mode: single
- id: '1682107400787'
  alias: Automated GitHub sync
  description: 'see also: https://www.youtube.com/watch?v=hhv-WqGUy_o'
  trigger:
  - platform: time
    at: 02:00:00
  condition: []
  action:
  - service: shell_command.pushupdates_to_github
    data: {}
  mode: single
