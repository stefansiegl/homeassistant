- watering_single:
    alias: watering_single
    icon: mdi:water
    description: >
      connection 1: Perlregner Hecke
      connection 2: Perlregner Beet
      connection 3: Perlregner Rasenmähergarage
      connection 4: Viereckregner Rasen
      connection 5: Teilkreisregner Rasen
      connection 6: - nicht benutzt - it will step over it
    fields:
      output:
        name: output
        description: The output of the 6-device to be started
        example: 1
        required: true
        selector:
          select:
            options:
              - label: Perlregner Hecke
                value: "1"
              - label: Perlregner Beet
                value: "2"
              - label: Perlregner Rasenmähergarage
                value: "3"
              - label: Viereckregner Rasen
                value: "4"
              - label: Teilkreisregner Rasen
                value: "5"
            multiple: false
      duration:
        name: duration
        description: Time in seconds.
        example: 30
        required: true
        selector:
          number:
            min: 60
            max: 3600
    variables:
      wait_1_to_2: 30
      wait_2_to_3: 60
      wait_3_to_4: 30
      wait_4_to_5: 30
      wait_5_to_1: 30
    mode: single
    sequence:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.watering_in_progress
      - service: system_log.write
        data:
          level: debug
          logger: garden_water_logger
          message: >-
            watering_single start. Target: {{output|int}} Current: {{(states("counter.water_current_output")|int)}} Time: {{duration}}

      # -----------------------------
      # Switch to the correct output
      # -----------------------------
      - repeat:
          while:
            - condition: template
              value_template: >
                {{ (states('counter.water_current_output')|int) != (output
                |int) }}
          sequence:
            - service: input_text.set_value
              target:
                entity_id: input_text.water_status
              data:
                value: "target: {{output|int}} for {{duration}} seconds. Status: changing output - currently: {{(states('counter.water_current_output')|int)}}"
            - service: switch.turn_on
              target:
                entity_id: switch.wassersteuerung
            - delay:
                seconds: 5
            - service: switch.turn_off
              target:
                entity_id: switch.wassersteuerung

            # we need different pauses between switching based on the lengths
            # of the pipe and the output pressure.
            # the numbers are based on my experiments with the system
            # manual switching & measuring time it took to change output
            - choose:
                - conditions: >
                    {{ is_state('counter.water_current_output', '1') }}
                  sequence:
                    - delay:
                        seconds: "{{ wait_1_to_2 | int }}"
                - conditions: >
                    {{ is_state('counter.water_current_output', '2') }}
                  sequence:
                    - delay:
                        seconds: "{{ wait_2_to_3 | int }}"
                - conditions: >
                    {{ is_state('counter.water_current_output', '3') }}
                  sequence:
                    - delay:
                        seconds: "{{ wait_3_to_4 | int }}"
                - conditions: >
                    {{ is_state('counter.water_current_output', '4') }}
                  sequence:
                    - delay:
                        seconds: "{{ wait_4_to_5 | int }}"
                - conditions: >
                    {{ is_state('counter.water_current_output', '5') }}
                  sequence:
                    - delay:
                        seconds: "{{ wait_5_to_1 | int }}"

            # we can now set the output to the correct new output.
            - if:
                - condition: numeric_state
                  entity_id: counter.water_current_output
                  below: 5
              then:
                - service: counter.increment
                  target:
                    entity_id: counter.water_current_output
              else:
                - service: counter.reset
                  target:
                    entity_id: counter.water_current_output
            - delay:
                seconds: 5

            - service: input_text.set_value
              target:
                entity_id: input_text.water_status
              data:
                value: "target: {{output|int}} for {{duration}} seconds. Status: changing output - currently: {{(states('counter.water_current_output')|int)}} - waiting for physical switch"

            - service: system_log.write
              data:
                level: debug
                logger: garden_water_logger
                message: >-
                  watering_set_output: Iteration: target {{output|int}}. current {{
                  states("counter.water_current_output")|int }} continue {{
                  (states("counter.water_current_output")|int) !=
                  (output|int) }}

      # --------------------------------
      # Switch to the correct output done
      # ---------------------------------

      - service: system_log.write
        data:
          level: debug
          logger: garden_water_logger
          message: >-
            watering_single output set. Target: {{output|int}} Current: {{(states("counter.water_current_output")|int)}} Time: {{duration}}

      # --------------------------------
      # Real watering can start
      # ---------------------------------

      - service: input_text.set_value
        target:
          entity_id: input_text.water_status
        data:
          value: "target: {{output|int}} for {{duration}} seconds. Watering until: {{ (now() | as_timestamp + (duration))|timestamp_custom('%H:%M', True) }} "
      - service: switch.turn_on
        target:
          entity_id: switch.wassersteuerung
      - delay:
          seconds: "{{ duration | int }}"
      - service: switch.turn_off
        target:
          entity_id: switch.wassersteuerung

      - service: input_text.set_value
        target:
          entity_id: input_text.water_status
        data:
          value: "Watering done, waiting for physical switch of output"

      # we need different pauses between switching based on the lengths
      # of the pipe and the output pressure.
      # the numbers are based on my experiments with the system
      # manual switching & measuring time it took to change output
      - choose:
          - conditions: >
              {{ is_state('counter.water_current_output', '1') }}
            sequence:
              - delay:
                  seconds: "{{ wait_1_to_2 | int }}"
          - conditions: >
              {{ is_state('counter.water_current_output', '2') }}
            sequence:
              - delay:
                  seconds: "{{ wait_2_to_3 | int }}"
          - conditions: >
              {{ is_state('counter.water_current_output', '3') }}
            sequence:
              - delay:
                  seconds: "{{ wait_3_to_4 | int }}"
          - conditions: >
              {{ is_state('counter.water_current_output', '4') }}
            sequence:
              - delay:
                  seconds: "{{ wait_4_to_5 | int }}"
          - conditions: >
              {{ is_state('counter.water_current_output', '5') }}
            sequence:
              - delay:
                  seconds: "{{ wait_5_to_1 | int }}"

      # we can now set the output to the correct new output.
      - if:
          - condition: numeric_state
            entity_id: counter.water_current_output
            below: 5
        then:
          - service: counter.increment
            target:
              entity_id: counter.water_current_output
        else:
          - service: counter.reset
            target:
              entity_id: counter.water_current_output
      - delay:
          seconds: 5

      - service: system_log.write
        data:
          level: debug
          logger: garden_water_logger
          message: >-
            watering_single: Watering is done.
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.watering_in_progress
      - service: input_text.set_value
        target:
          entity_id: input_text.water_status
        data:
          value: "<empty>"

- watering_multiple:
    alias: watering_multiple
    icon: mdi:water
    description: >
      Bewässerung für mehrere Zonen manuell einstellen. Wird direkt ausgeführt.
      0 bedeutet dass die Zone übersprungen wird.
    fields:
      water_hecke:
        name: Bewässerung Perlregner Hecke
        description: Wielange [min] soll Hecke bewässert werden (3,4l/h 7,6qm2)
        required: true
        selector:
          number:
            min: 0
            max: 60
      water_beet:
        name: Bewässerung Perlregner Beet
        description: Wielange [min] soll das Beet bewässert werden (2,2l/h 5,95qm2)
        required: true
        selector:
          number:
            min: 0
            max: 60
      water_rasenmaher:
        name: Bewässerung Perlregner Rasenmähergarage
        description: Wielange [min] soll das Beet auf der Rasenmähergarage bewässert werden (0.1l/h 0.75qm2)
        required: true
        selector:
          number:
            min: 0
            max: 60
      water_rasen_viereck:
        name: Bewässerung Viereckregner Rasen
        description: Wielange [min] soll der Viereckregner Rasen bewässert werden (7.5l/h 25qm2)
        required: true
        selector:
          number:
            min: 0
            max: 60
      water_rasen_teilkreis:
        name: Bewässerung Teilkreisregner Rasen
        description: Wielange [min] soll der Teilkreisregner Rasen bewässert werden (7.5l/h 25qm2)
        required: true
        selector:
          number:
            min: 0
            max: 60

    sequence:
      - if:
          - condition: template
            value_template: >
              {{ water_hecke|int != 0 }}
        then:
          - service: script.watering_single
            data:
              output: "1"
              duration: "{{ water_hecke|int * 60 }}"

      - if:
          - condition: template
            value_template: >
              {{ water_beet|int != 0 }}
        then:
          - service: script.watering_single
            data:
              output: "2"
              duration: "{{ water_beet|int * 60 }}"

      - if:
          - condition: template
            value_template: >
              {{ water_rasenmaher|int != 0 }}
        then:
          - service: script.watering_single
            data:
              output: "3"
              duration: "{{ water_rasenmaher|int * 60 }}"

      - if:
          - condition: template
            value_template: >
              {{ water_rasen_viereck|int != 0 }}
        then:
          - service: script.watering_single
            data:
              output: "4"
              duration: "{{ water_rasen_viereck|int * 60 }}"

      - if:
          - condition: template
            value_template: >
              {{ water_rasen_teilkreis|int != 0 }}
        then:
          - service: script.watering_single
            data:
              output: "5"
              duration: "{{ water_rasen_teilkreis|int * 60 }}"
